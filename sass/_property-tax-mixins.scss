// A wrapper mixin to apply standard body type where needed, since we're abandoning the usual NGUX framework.
@mixin serif(){
	@include serif-text(16px, 1.6em);
	margin: 0 0 18px 0;
}

@mixin text_stroke(
	$text-color:black, 
	$stroke-color:white, 
	$stroke-width:1px, 
	$stroke-opacity:1,
	$stroke-blur:0){
	  

  color:$text-color;
  text-shadow:
	#{0-$stroke-width} #{0-$stroke-width} $stroke-blur rgba($stroke-color, $stroke-opacity),  
	$stroke-width #{0-$stroke-width} $stroke-blur rgba($stroke-color, $stroke-opacity),
	#{0-$stroke-width} $stroke-width $stroke-blur rgba($stroke-color, $stroke-opacity),
	$stroke-width $stroke-width $stroke-blur rgba($stroke-color, $stroke-opacity);
}

@mixin display-type($type){
	@if $type == 'serif'{
		font-family: 'Playfair Display', 'Georgia', serif;
	} @else {
		font-family: 'Arial', 'Helvetica', sans-serif;
	}
}

@mixin display-text($type){
	@include display-type($type);
}

@keyframes bounce {
    0% { transform: translate(0,0); }
    50% { transform: translate(0,-0.2em); }
    70% { transform: translate(0,-0.3em); }
    100% { transform: translate(0,0); }
}

@keyframes bounce_reverse {
    0% { transform: translate(0,0); }
    50% { transform: translate(0,0.2em); }
    70% { transform: translate(0,0.3em); }
    100% { transform: translate(0,0); }
}

@mixin bounce($time, $direction:bounce){
  display: inline-block;
  // position: relative;
  animation: $direction $time infinite linear;
}

@mixin river_narrow($max-width){
	max-width: $max-width;
	margin-top: 0;
	margin-bottom: 0;
	margin-left: auto;
	margin-right: auto;
}

@keyframes enlarge{
	0%{ transform:scale(.5); }
	100%{ transform:scale(1); }
}

@mixin enlarge($time){
  // display: inline-block;
  // position: relative;
  animation: enlarge $time 1 linear;
}


///
/// Viewport sized typography with minimum and maximum values
///
/// @author Eduardo Boucas (@eduardoboucas)
///
/// @param {Number}   $responsive  - Viewport-based size
/// @param {Number}   $min         - Minimum font size (px)
/// @param {Number}   $max         - Maximum font size (px)
///                                  (optional)
/// @param {Number}   $fallback    - Fallback for viewport-
///                                  based units (optional)
///
/// @example scss - 5vw font size (with 50px fallback), 
///                 minumum of 35px and maximum of 150px
///  @include responsive-font(5vw, 35px, 150px, 50px);
///
@mixin responsive-font($responsive, $min, $max: false, $fallback: false) {
  $responsive-unitless: $responsive / ($responsive - $responsive + 1);
  $dimension: if(unit($responsive) == 'vh', 'height', 'width');
  $min-breakpoint: $min / $responsive-unitless * 100;
  
  @media (max-#{$dimension}: #{$min-breakpoint}) {
    font-size: $min;
  }
  
  @if $max {
    $max-breakpoint: $max / $responsive-unitless * 100;
    
    @media (min-#{$dimension}: #{$max-breakpoint}) {
      font-size: $max;
    }
  }
  
  @if $fallback {
    font-size: $fallback;
  }
  
  font-size: $responsive;
}